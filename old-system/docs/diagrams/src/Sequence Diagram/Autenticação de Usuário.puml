# Autenticação de Usuário

## Diagrama de Sequência UML

@startuml Autenticação de Usuário
title Autenticação de Usuário

actor "Usuário" as U
participant "Sistema" as S
participant "User Model" as UM
database "Banco de Dados" as DB

U -> S: Tenta fazer login
S -> UM: auth(email)
UM -> DB: Consulta usuário por email
DB --> UM: Retorna dados do usuário
UM --> S: Retorna UserEntity
S -> S: Verifica senha
alt Senha correta
S --> U: Login bem-sucedido
else Senha incorreta
S --> U: Erro de autenticação
end
@enduml

## Descrição Detalhada

O processo de autenticação de usuário no sistema Easy Budget segue os seguintes passos:

1. O usuário inicia o processo tentando fazer login no sistema.
2. O sistema chama o método `auth(email)` no User Model.
3. O User Model consulta o banco de dados para obter os dados do usuário com o email fornecido.
4. O banco de dados retorna os dados do usuário, se encontrado.
5. O User Model cria e retorna um objeto UserEntity com os dados do usuário.
6. O sistema verifica se a senha fornecida pelo usuário corresponde à senha armazenada.
7. Se a senha estiver correta, o sistema permite o acesso ao usuário.
8. Se a senha estiver incorreta, o sistema exibe uma mensagem de erro de autenticação.

## Casos de Uso Relacionados

*   UC001: Login de Usuário
*   UC002: Recuperação de Senha
*   UC003: Bloqueio de Conta por Tentativas Falhas

@startuml UC001: Login de Usuário
title UC001: Login de Usuário

actor "Usuário" as U
participant "Sistema" as S
participant "User Model" as UM
database "Banco de Dados" as DB

U -> S: Insere credenciais (email, senha)
S -> UM: auth(email)
UM -> DB: Consulta usuário por email
DB --> UM: Retorna dados do usuário
UM --> S: Retorna UserEntity
S -> S: Verifica senha
alt Senha correta
    S -> S: Cria sessão
    S --> U: Login bem-sucedido
else Senha incorreta
    S --> U: Erro de autenticação
end
@enduml

@startuml UC002: Recuperação de Senha
title UC002: Recuperação de Senha

actor "Usuário" as U
participant "Sistema" as S
participant "User Model" as UM
database "Banco de Dados" as DB
participant "Email Service" as ES

U -> S: Solicita recuperação de senha
S -> UM: findUserByEmail(email)
UM -> DB: Consulta usuário por email
DB --> UM: Retorna dados do usuário
UM --> S: Retorna UserEntity
S -> S: Gera token de recuperação
S -> DB: Salva token de recuperação
S -> ES: Envia email com link de recuperação
ES --> U: Envia email
U -> S: Acessa link de recuperação
S -> S: Valida token
alt Token válido
    S --> U: Exibe formulário de nova senha
    U -> S: Envia nova senha
    S -> UM: atualizaSenha(userId, novaSenha)
    UM -> DB: Atualiza senha no banco
    S --> U: Confirmação de senha alterada
else Token inválido
    S --> U: Erro de token inválido
end
@enduml

@startuml UC003: Bloqueio de Conta por Tentativas Falhas
title UC003: Bloqueio de Conta por Tentativas Falhas

actor "Usuário" as U
participant "Sistema" as S
participant "User Model" as UM
database "Banco de Dados" as DB

loop 3 vezes
    U -> S: Tenta login com senha incorreta
    S -> UM: auth(email)
    UM -> DB: Consulta usuário
    DB --> UM: Retorna dados do usuário
    UM --> S: Retorna UserEntity
    S -> S: Verifica senha (falha)
    S -> UM: incrementarTentativasFalhas(userId)
    UM -> DB: Atualiza contador de tentativas
    S --> U: Erro de autenticação
end

S -> UM: verificarLimiteTentativas(userId)
UM -> DB: Consulta número de tentativas
DB --> UM: Retorna número de tentativas
alt Limite excedido
    UM -> DB: Bloqueia conta
    S --> U: Notifica bloqueio da conta
else Limite não excedido
    S --> U: Permite nova tentativa
end
@enduml


## Requisitos de Segurança

1. As senhas devem ser armazenadas de forma criptografada usando bcrypt.
2. O sistema deve bloquear a conta após 3 tentativas falhas de login em um período de 15 minutos.
3. As comunicações entre o cliente e o servidor devem ser criptografadas usando HTTPS.
4. Os tokens de sessão devem ser invalidados após o logout ou após um período de inatividade.

## Diagrama de Classes

@startuml Diagrama de Classes - Autenticação
class User {
+id: int
+email: string
+password: string
+auth(email: string): UserEntity
+verifyPassword(password: string): boolean
}

class UserEntity {
+id: int
+email: string
+firstName: string
+lastName: string
}

class AuthController {
+login(email: string, password: string): boolean
+logout(): void
}

User --> UserEntity: creates
AuthController --> User: uses
@enduml

## Fluxograma

@startuml Fluxograma - Autenticação
start
: Usuário tenta fazer login;
: Sistema busca usuário por email;
if (Usuário encontrado?) then (sim)
: Verifica senha;
if (Senha correta?) then (sim)
: Login bem-sucedido;
else (não)
: Incrementa contador de tentativas falhas;
if (Tentativas > 3?) then (sim)
: Bloqueia conta;
endif
: Exibe erro de autenticação;
endif
else (não)
: Exibe erro de autenticação;
endif
stop
@enduml

## Tabela de Entradas e Saídas

| Etapa                | Entrada                           | Saída            |
|----------------------|-----------------------------------|------------------|
| Tentativa de Login   | Email, Senha                      | Sucesso/Erro     |
| Busca de Usuário     | Email                             | UserEntity/null  |
| Verificação de Senha | Senha fornecida, Senha armazenada | Verdadeiro/Falso |

## Tratamento de Erros

*   Usuário não encontrado: Exibir mensagem genérica "Email ou senha incorretos"
*   Senha incorreta: Exibir mensagem genérica "Email ou senha incorretos"
*   Conta bloqueada: Exibir mensagem "Conta bloqueada devido a múltiplas tentativas falhas"

## Notas de Implementação

*   Utilizar a biblioteca bcrypt para hash e verificação de senhas
*   Implementar um mecanismo de rate limiting para prevenir ataques de força bruta
*   Usar tokens JWT para gerenciar sessões de usuário após o login bem-sucedido

## Testes Recomendados

1. Teste de login com credenciais válidas
2. Teste de login com email inexistente
3. Teste de login com senha incorreta
4. Teste de bloqueio de conta após múltiplas tentativas falhas
5. Teste de logout e invalidação de sessão

## Glossário

*   **UserEntity**: Objeto que representa os dados do usuário após a autenticação
*   **bcrypt**: Função de hash de senha projetada para ser "lenta" computacionalmente, dificultando ataques de força bruta
*   **JWT (JSON Web Token)**: Padrão para criação de tokens de acesso que permitem a propagação de identidade e privilégios

## Referências

*   [Documentação do bcrypt](https://www.npmjs.com/package/bcrypt)
*   [Melhores práticas de autenticação OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)
*   [Especificação JWT](https://jwt.io/introduction)
