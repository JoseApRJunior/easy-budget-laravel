<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Log;

// Aplicar padrões arquiteturais do projeto Easy Budget Laravel
// Seguindo arquitetura DUAL: AbstractTenantRepository para dados isolados
use App\Support\ServiceResult;
use App\Repositories\Contracts\TenantRepositoryInterface;

class {{ class }} extends Controller
{
    /**
     * Repository para acesso a dados isolados por tenant
     * Aplicando arquitetura DUAL: dados específicos de cada empresa
     */
    protected TenantRepositoryInterface $repository;

    /**
     * Construtor com injeção de dependência
     * Aplicando padrão de arquitetura DUAL para multi-tenant
     */
    public function __construct(TenantRepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Display a listing of the resource.
     *
     * PADRÃO NÍVEL 3: Controller multi-tenant com filtros avançados
     * Dados automaticamente isolados por empresa (tenant_id)
     */
    public function index(Request $request): View|JsonResponse
    {
        try {
            // Aplicar filtros seguindo padrão arquitetural
            $filters = $request->validate([
                'search' => 'nullable|string|max:255',
                'status' => 'nullable|string',
                'per_page' => 'nullable|integer|min:10|max:100',
                'page' => 'nullable|integer|min:1'
            ]);

            // Buscar dados automaticamente filtrados por tenant
            $result = $this->repository->getAllByTenant(tenant('id'), $filters);

            // Log automático da operação
            Log::info("Listagem de {{ pluralClass }} (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'filters' => $filters,
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            // Resposta híbrida: Web ou API
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => $result,
                    'message' => '{{ pluralClass }} carregados com sucesso',
                    'tenant_id' => tenant('id')
                ]);
            }

            return view('{{ pluralClass }}.index', [
                'data' => $result,
                'message' => '{{ pluralClass }} carregados com sucesso',
                'filters' => $filters,
                'tenant_id' => tenant('id')
            ]);

        } catch (\Exception $e) {
            Log::error("Erro na listagem de {{ pluralClass }} (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar listagem');
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * PADRÃO NÍVEL 2: Controller multi-tenant para criação
     */
    public function create(): View
    {
        try {
            // Buscar dados necessários automaticamente filtrados por tenant
            $relatedData = $this->repository->getRelatedDataForCreate(tenant('id'));

            return view('{{ pluralClass }}.create', [
                'relatedData' => $relatedData,
                'tenant_id' => tenant('id')
            ]);

        } catch (\Exception $e) {
            Log::error("Erro ao carregar formulário de criação (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'error' => $e->getMessage(),
                'user_id' => auth()->id()
            ]);

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar formulário');
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * PADRÃO NÍVEL 3: Controller multi-tenant com auditoria completa
     */
    public function store(Request $request): RedirectResponse|JsonResponse
    {
        try {
            // Validação usando Form Request
            $validated = $request->validate([
                // Campos específicos serão definidos no Form Request
                'name' => 'required|string|max:255',
                // tenant_id será adicionado automaticamente
            ]);

            // Adicionar tenant_id automaticamente
            $validated['tenant_id'] = tenant('id');

            // Usar repository para criação com isolamento automático
            $result = $this->repository->createByTenant($validated, tenant('id'));

            // Log detalhado da operação
            Log::info("{{ class }} criado (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'data' => $result->getData(),
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            // Resposta híbrida
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => $result->isSuccess(),
                    'data' => $result->getData(),
                    'message' => $result->getMessage(),
                    'tenant_id' => tenant('id')
                ], $result->isSuccess() ? 201 : 400);
            }

            if ($result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('success', $result->getMessage());
            }

            return redirect()->back()
                           ->with('error', $result->getMessage())
                           ->withInput();

        } catch (\Exception $e) {
            Log::error("Erro na criação de {{ class }} (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->back()
                           ->with('error', 'Erro ao criar {{ class }}')
                           ->withInput();
        }
    }

    /**
     * Display the specified resource.
     *
     * PADRÃO NÍVEL 3: Controller multi-tenant com verificação de propriedade
     */
    public function show(Request $request, string $id): View|JsonResponse|RedirectResponse
    {
        try {
            // Buscar dados verificando automaticamente o tenant_id
            $result = $this->repository->findByIdAndTenantId($id, tenant('id'));

            if (!$result->isSuccess()) {
                if ($request->expectsJson()) {
                    return response()->json([
                        'success' => false,
                        'message' => $result->getMessage()
                    ], 404);
                }

                return redirect()->route('{{ pluralClass }}.index')
                               ->with('error', $result->getMessage());
            }

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => $result->getData(),
                    'message' => $result->getMessage(),
                    'tenant_id' => tenant('id')
                ]);
            }

            return view('{{ pluralClass }}.show', [
                'data' => $result->getData(),
                'tenant_id' => tenant('id')
            ]);

        } catch (\Exception $e) {
            Log::error("Erro ao visualizar {{ class }} (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor'
                ], 500);
            }

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar {{ class }}');
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * PADRÃO NÍVEL 3: Controller multi-tenant com verificação de propriedade
     */
    public function edit(Request $request, string $id): View|RedirectResponse
    {
        try {
            // Buscar dados verificando automaticamente o tenant_id
            $result = $this->repository->findByIdAndTenantId($id, tenant('id'));

            if (!$result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('error', $result->getMessage());
            }

            // Buscar dados relacionados filtrados por tenant
            $relatedData = $this->repository->getRelatedDataForEdit($id, tenant('id'));

            return view('{{ pluralClass }}.edit', [
                'data' => $result->getData(),
                'relatedData' => $relatedData,
                'tenant_id' => tenant('id')
            ]);

        } catch (\Exception $e) {
            Log::error("Erro ao carregar formulário de edição (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id()
            ]);

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar formulário de edição');
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * PADRÃO NÍVEL 3: Controller multi-tenant com auditoria completa
     */
    public function update(Request $request, string $id): RedirectResponse|JsonResponse
    {
        try {
            // Validação usando Form Request
            $validated = $request->validate([
                'name' => 'required|string|max:255',
            ]);

            // Usar repository para atualização com verificação automática de tenant
            $result = $this->repository->updateByTenantId($id, $validated, tenant('id'));

            // Log detalhado da operação
            Log::info("{{ class }} atualizado (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'id' => $id,
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            // Resposta híbrida
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => $result->isSuccess(),
                    'data' => $result->getData(),
                    'message' => $result->getMessage(),
                    'tenant_id' => tenant('id')
                ]);
            }

            if ($result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('success', $result->getMessage());
            }

            return redirect()->back()
                           ->with('error', $result->getMessage())
                           ->withInput();

        } catch (\Exception $e) {
            Log::error("Erro na atualização de {{ class }} (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->back()
                           ->with('error', 'Erro ao atualizar {{ class }}')
                           ->withInput();
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * PADRÃO NÍVEL 3: Controller multi-tenant com verificação de propriedade
     */
    public function destroy(Request $request, string $id): RedirectResponse|JsonResponse
    {
        try {
            // Buscar dados antes da exclusão para log
            $entityResult = $this->repository->findByIdAndTenantId($id, tenant('id'));
            $entityData = $entityResult->getData();

            // Usar repository para exclusão com verificação automática de tenant
            $result = $this->repository->deleteByTenantId($id, tenant('id'));

            // Log detalhado da operação
            Log::warning("{{ class }} excluído (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'id' => $id,
                'data' => $entityData,
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            // Resposta híbrida
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => $result->isSuccess(),
                    'message' => $result->getMessage(),
                    'tenant_id' => tenant('id')
                ]);
            }

            if ($result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('success', $result->getMessage());
            }

            return redirect()->back()
                           ->with('error', $result->getMessage());

        } catch (\Exception $e) {
            Log::error("Erro na exclusão de {{ class }} (Tenant: " . tenant('id') . ")", [
                'controller' => static::class,
                'tenant_id' => tenant('id'),
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->back()
                           ->with('error', 'Erro ao excluir {{ class }}');
        }
    }
}
