<?php

namespace {{ namespace }};

{{ factoryImport }}
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;

// Aplicar padrões arquiteturais do projeto Easy Budget Laravel
// Seguindo sistema de padrões de 3 níveis para Models

class {{ class }} extends Model
{
    use HasFactory, SoftDeletes;

    /**
     * Traits aplicados automaticamente seguindo padrões do projeto
     *
     * TenantScoped: Para isolamento automático por empresa (multi-tenant)
     * Auditable: Para auditoria automática de todas as operações
     *
     * Estes traits são aplicados automaticamente em todos os modelos
     * seguindo nossos padrões arquiteturais
     */
    // use TenantScoped, Auditable; // Descomente se necessário para este modelo

    /**
     * Campos atribuíveis em massa
     *
     * PADRÃO NÍVEL 2: Campos essenciais + campos específicos do modelo
     * tenant_id é incluído automaticamente para modelos multi-tenant
     */
    protected $fillable = [
        'tenant_id', // Campo padrão para multi-tenant
        // Adicionar campos específicos do modelo
        // 'nome',
        // 'descricao',
        // 'ativo',
    ];

    /**
     * Campos que devem ser convertidos para tipos nativos
     *
     * PADRÃO NÍVEL 2: Casts essenciais aplicados automaticamente
     */
    protected $casts = [
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'deleted_at' => 'datetime',
        // Adicionar casts específicos conforme necessidade
        // 'ativo' => 'boolean',
        // 'valor' => 'decimal:2',
    ];

    /**
     * Campos que devem ser ocultados na serialização JSON
     *
     * PADRÃO NÍVEL 1: Ocultar campos sensíveis por padrão
     */
    protected $hidden = [
        // Adicionar campos sensíveis conforme necessidade
        // 'senha',
        // 'token',
    ];

    /**
     * Relacionamentos do modelo
     *
     * Estes métodos serão implementados conforme necessidade específica
     * Seguindo padrões de 3 níveis para relacionamentos
     */

    /**
     * Relacionamento com Tenant (Multi-tenant)
     * Aplicado automaticamente em modelos que usam TenantScoped
     */
    // public function tenant()
    // {
    //     return $this->belongsTo(Tenant::class);
    // }

    /**
     * Relacionamento com User (Auditoria)
     * Aplicado automaticamente em modelos que usam Auditable
     */
    // public function createdBy()
    // {
    //     return $this->belongsTo(User::class, 'created_by');
    // }

    /**
     * Relacionamento com User (Auditoria)
     * Aplicado automaticamente em modelos que usam Auditable
     */
    // public function updatedBy()
    // {
    //     return $this->belongsTo(User::class, 'updated_by');
    // }

    /**
     * Scopes locais para consultas comuns
     *
     * PADRÃO NÍVEL 2: Scopes essenciais aplicados automaticamente
     */

    /**
     * Scope para registros ativos
     */
    // public function scopeActive($query)
    // {
    //     return $query->where('ativo', true);
    // }

    /**
     * Scope para busca por nome
     */
    // public function scopeSearch($query, string $search)
    // {
    //     return $query->where('nome', 'like', "%{$search}%");
    // }

    /**
     * Accessors e Mutators
     *
     * PADRÃO NÍVEL 2: Accessors essenciais aplicados automaticamente
     */

    /**
     * Accessor para formatação de moeda
     */
    // public function getValorFormatadoAttribute()
    // {
    //     return 'R$ ' . number_format($this->valor, 2, ',', '.');
    // }

    /**
     * Mutator para limpeza de dados
     */
    // public function setNomeAttribute($value)
    // {
    //     $this->attributes['nome'] = trim(strip_tags($value));
    // }

    /**
     * Métodos auxiliares
     *
     * PADRÃO NÍVEL 2: Métodos utilitários aplicados automaticamente
     */

    /**
     * Verifica se o modelo pode ser excluído
     */
    // public function canBeDeleted(): bool
    // {
    //     // Implementar lógica específica conforme necessidade
    //     return true;
    // }

    /**
     * Retorna dados formatados para API
     */
    // public function toApiArray(): array
    // {
    //     return [
    //         'id' => $this->id,
    //         'nome' => $this->nome,
    //         'created_at' => $this->created_at?->toISOString(),
    //     ];
    // }

    {{ factory }}
}
