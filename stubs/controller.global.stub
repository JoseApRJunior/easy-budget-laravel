<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Log;

// Aplicar padrões arquiteturais do projeto Easy Budget Laravel
// Seguindo arquitetura DUAL: AbstractGlobalRepository para dados compartilhados
use App\Support\ServiceResult;
use App\Repositories\Contracts\GlobalRepositoryInterface;

class {{ class }} extends Controller
{
    /**
     * Repository para acesso a dados compartilhados globalmente
     * Aplicando arquitetura DUAL: dados comuns a todas as empresas
     */
    protected GlobalRepositoryInterface $repository;

    /**
     * Construtor com injeção de dependência
     * Aplicando padrão de arquitetura DUAL para dados globais
     */
    public function __construct(GlobalRepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Display a listing of the resource.
     *
     * PADRÃO NÍVEL 3: Controller global com filtros avançados
     * Dados compartilhados entre todas as empresas (sem isolamento tenant)
     */
    public function index(Request $request): View|JsonResponse
    {
        try {
            // Aplicar filtros seguindo padrão arquitetural
            $filters = $request->validate([
                'search' => 'nullable|string|max:255',
                'status' => 'nullable|string',
                'per_page' => 'nullable|integer|min:10|max:100',
                'page' => 'nullable|integer|min:1'
            ]);

            // Buscar dados globalmente (sem filtro de tenant)
            $result = $this->repository->getAll($filters);

            // Log automático da operação
            Log::info("Listagem global de {{ pluralClass }}", [
                'controller' => static::class,
                'filters' => $filters,
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip()
            ]);

            // Resposta híbrida: Web ou API
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => $result,
                    'message' => '{{ pluralClass }} carregados com sucesso',
                    'scope' => 'global'
                ]);
            }

            return view('{{ pluralClass }}.index', [
                'data' => $result,
                'message' => '{{ pluralClass }} carregados com sucesso',
                'filters' => $filters,
                'scope' => 'global'
            ]);

        } catch (\Exception $e) {
            Log::error("Erro na listagem global de {{ pluralClass }}", [
                'controller' => static::class,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar listagem');
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * PADRÃO NÍVEL 2: Controller global para criação
     * Dados compartilhados não precisam de tenant_id
     */
    public function create(): View
    {
        try {
            // Buscar dados necessários globalmente
            $relatedData = $this->repository->getRelatedDataForCreate();

            return view('{{ pluralClass }}.create', [
                'relatedData' => $relatedData,
                'scope' => 'global'
            ]);

        } catch (\Exception $e) {
            Log::error("Erro ao carregar formulário de criação global", [
                'controller' => static::class,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id')
            ]);

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar formulário');
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * PADRÃO NÍVEL 3: Controller global com auditoria completa
     * Dados compartilhados afetam todas as empresas
     */
    public function store(Request $request): RedirectResponse|JsonResponse
    {
        try {
            // Validação usando Form Request
            $validated = $request->validate([
                // Campos específicos serão definidos no Form Request
                'name' => 'required|string|max:255',
                // Sem tenant_id - dados são globais
            ]);

            // Usar repository para criação global
            $result = $this->repository->create($validated);

            // Log detalhado da operação (dados globais afetam todas as empresas)
            Log::info("{{ class }} global criado (afeta todas as empresas)", [
                'controller' => static::class,
                'data' => $result->getData(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip(),
                'scope' => 'global'
            ]);

            // Resposta híbrida
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => $result->isSuccess(),
                    'data' => $result->getData(),
                    'message' => $result->getMessage(),
                    'scope' => 'global'
                ], $result->isSuccess() ? 201 : 400);
            }

            if ($result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('success', $result->getMessage());
            }

            return redirect()->back()
                           ->with('error', $result->getMessage())
                           ->withInput();

        } catch (\Exception $e) {
            Log::error("Erro na criação global de {{ class }}", [
                'controller' => static::class,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->back()
                           ->with('error', 'Erro ao criar {{ class }}')
                           ->withInput();
        }
    }

    /**
     * Display the specified resource.
     *
     * PADRÃO NÍVEL 2: Controller global para visualização
     */
    public function show(Request $request, string $id): View|JsonResponse|RedirectResponse
    {
        try {
            // Buscar dados globalmente (sem filtro de tenant)
            $result = $this->repository->find($id);

            if (!$result->isSuccess()) {
                if ($request->expectsJson()) {
                    return response()->json([
                        'success' => false,
                        'message' => $result->getMessage()
                    ], 404);
                }

                return redirect()->route('{{ pluralClass }}.index')
                               ->with('error', $result->getMessage());
            }

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'data' => $result->getData(),
                    'message' => $result->getMessage(),
                    'scope' => 'global'
                ]);
            }

            return view('{{ pluralClass }}.show', [
                'data' => $result->getData(),
                'scope' => 'global'
            ]);

        } catch (\Exception $e) {
            Log::error("Erro ao visualizar {{ class }} global", [
                'controller' => static::class,
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id')
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor'
                ], 500);
            }

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar {{ class }}');
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * PADRÃO NÍVEL 2: Controller global para edição
     */
    public function edit(Request $request, string $id): View|RedirectResponse
    {
        try {
            // Buscar dados globalmente
            $result = $this->repository->find($id);

            if (!$result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('error', $result->getMessage());
            }

            // Buscar dados relacionados globalmente
            $relatedData = $this->repository->getRelatedDataForEdit($id);

            return view('{{ pluralClass }}.edit', [
                'data' => $result->getData(),
                'relatedData' => $relatedData,
                'scope' => 'global'
            ]);

        } catch (\Exception $e) {
            Log::error("Erro ao carregar formulário de edição global", [
                'controller' => static::class,
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id')
            ]);

            return redirect()->route('{{ pluralClass }}.index')
                           ->with('error', 'Erro ao carregar formulário de edição');
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * PADRÃO NÍVEL 3: Controller global com impacto em todas as empresas
     */
    public function update(Request $request, string $id): RedirectResponse|JsonResponse
    {
        try {
            // Validação usando Form Request
            $validated = $request->validate([
                'name' => 'required|string|max:255',
            ]);

            // Usar repository para atualização global
            $result = $this->repository->update($id, $validated);

            // Log detalhado da operação (dados globais afetam todas as empresas)
            Log::info("{{ class }} global atualizado (afeta todas as empresas)", [
                'controller' => static::class,
                'id' => $id,
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip(),
                'scope' => 'global'
            ]);

            // Resposta híbrida
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => $result->isSuccess(),
                    'data' => $result->getData(),
                    'message' => $result->getMessage(),
                    'scope' => 'global'
                ]);
            }

            if ($result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('success', $result->getMessage());
            }

            return redirect()->back()
                           ->with('error', $result->getMessage())
                           ->withInput();

        } catch (\Exception $e) {
            Log::error("Erro na atualização global de {{ class }}", [
                'controller' => static::class,
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->back()
                           ->with('error', 'Erro ao atualizar {{ class }}')
                           ->withInput();
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * PADRÃO NÍVEL 3: Controller global com impacto crítico
     * Exclusão de dados compartilhados afeta todas as empresas
     */
    public function destroy(Request $request, string $id): RedirectResponse|JsonResponse
    {
        try {
            // Buscar dados antes da exclusão para log
            $entityResult = $this->repository->find($id);
            $entityData = $entityResult->getData();

            // Verificar se pode ser excluído (dados globais críticos)
            if (!$this->repository->canBeDeleted($id)) {
                if ($request->expectsJson()) {
                    return response()->json([
                        'success' => false,
                        'message' => 'Este recurso não pode ser excluído pois está em uso'
                    ], 400);
                }

                return redirect()->back()
                               ->with('error', 'Este recurso não pode ser excluído pois está em uso');
            }

            // Usar repository para exclusão global
            $result = $this->repository->delete($id);

            // Log crítico da operação (dados globais afetam todas as empresas)
            Log::warning("{{ class }} global excluído (afeta todas as empresas)", [
                'controller' => static::class,
                'id' => $id,
                'data' => $entityData,
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip(),
                'scope' => 'global',
                'impact' => 'critical'
            ]);

            // Resposta híbrida
            if ($request->expectsJson()) {
                return response()->json([
                    'success' => $result->isSuccess(),
                    'message' => $result->getMessage(),
                    'scope' => 'global'
                ]);
            }

            if ($result->isSuccess()) {
                return redirect()->route('{{ pluralClass }}.index')
                               ->with('success', $result->getMessage());
            }

            return redirect()->back()
                           ->with('error', $result->getMessage());

        } catch (\Exception $e) {
            Log::error("Erro na exclusão global de {{ class }}", [
                'controller' => static::class,
                'id' => $id,
                'error' => $e->getMessage(),
                'user_id' => auth()->id(),
                'tenant_id' => tenant('id'),
                'ip' => $request->ip()
            ]);

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Erro interno do servidor',
                    'error' => config('app.debug') ? $e->getMessage() : null
                ], 500);
            }

            return redirect()->back()
                           ->with('error', 'Erro ao excluir {{ class }}');
        }
    }
}
